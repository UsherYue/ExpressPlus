#!/usr/core/env node

/**
 * PHPProject
 * Helper.php Created by usher.yue.
 * User: usher.yue
 * Date: 17/1/8
 * Time: 下午5:27
 * www启动入口
 */
'use strict';

var http = require('http');
var path = require('path');
var cluster = require('cluster');

///////////进程启动控制状态/////////////////
/**
 * true开启集群多核
 * false 启动单核用于开发
 * @type {boolean}
 */
const USE_CLUSTER  =  true ;
/**
 * app path
 * @type {string}
 */
const APP_PATH = './app/';
/**
 * 名字空间配置文件
 * @type {string}
 */
const NS_CONFIG = `${APP_PATH}conf/ns`;
/**
 * 应用全局配置文件
 * @type {string}
 */
const APP_CONFIG = `${APP_PATH}conf/config`;
/**
 * core入口禁止修改
 * @type {string}
 */
const  CORE_PATH= './core/core';
/**
 * process name
 * @type {string}
 */
const  PROCESS_NAME='ExpressPlus';
//////////////////////////////////////////
global.config = require(APP_CONFIG);
global.config.nsConfig = require(NS_CONFIG);
var app = require(CORE_PATH);

//run service
if (cluster.isMaster) {
    var workersNum = 1;
    colorlog.info('Master',"Run ExpressPlus Master Process ,PID:"+process.pid);
    // Fork workers.
    if(USE_CLUSTER){
        workersNum=require('os').cpus().length
    }
    for (let i = 0; i < workersNum; i++) {
        cluster.fork();
    }
    cluster.on('listening', function (worker, address) {
        colorlog.info('Worker','PID:'+worker.process.pid+',Listen Port:' + address.port);
    });
    cluster.on('exit', function (worker, code, signal) {
        colorlog.warning('Error','Worker ' + worker.process.pid + ' Exited');
        cluster.fork();
    });
    process.title = `${PROCESS_NAME} Master  Process `;
} else {
    //server port
    var port = normalizePort(process.env.PORT || global.config.httpConfig.port);
    app.set('port', port);
    var server = http.createServer(app);
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    //script file
    const scriptName = path.parse(__filename).name;
    process.title = `${PROCESS_NAME} Worker  Process ${scriptName}`;
}

/**
 * port convert
 * @param val
 * @returns {*}
 */
function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
        return val;
    }
    if (port >= 0) {
        return port;
    }
    return false;
}

/**
 *
 * Normalize a port into a number, string, or false.
 * Normalize a port into a number, string, or false.
 * @param error
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;
    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            colorlog.warning('Error',bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            colorlog.warning('Error',bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    var debug = require('debug')('debugserver');
    debug('Express Listening on ' + bind);
}